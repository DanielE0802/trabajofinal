#include <iostream>
#include <vector>
#include <queue>
#include <iomanip>
#include <limits>

using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Función para insertar un nodo en un árbol de búsqueda binaria
TreeNode* insertNode(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }

    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }

    return root;
}

// Función para construir un árbol desde recorridos en inorden y preorden
TreeNode* buildTreeFromInPre(vector<int>& inorder, vector<int>& preorder, int inStart, int inEnd, int& preIndex) {
    if (inStart > inEnd) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(preorder[preIndex++]);

    int inIndex = 0;
    for (int i = inStart; i <= inEnd; ++i) {
        if (inorder[i] == root->data) {
            inIndex = i;
            break;
        }
    }

    root->left = buildTreeFromInPre(inorder, preorder, inStart, inIndex - 1, preIndex);
    root->right = buildTreeFromInPre(inorder, preorder, inIndex + 1, inEnd, preIndex);

    return root;
}

// Función para construir un árbol desde recorridos en inorden y posorden
TreeNode* buildTreeFromInPos(vector<int>& inorder, vector<int>& posorder, int inStart, int inEnd, int& posIndex) {
    if (inStart > inEnd) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(posorder[posIndex--]);

    int inIndex = 0;
    for (int i = inStart; i <= inEnd; ++i) {
        if (inorder[i] == root->data) {
            inIndex = i;
            break;
        }
    }

    root->right = buildTreeFromInPos(inorder, posorder, inIndex + 1, inEnd, posIndex);
    root->left = buildTreeFromInPos(inorder, posorder, inStart, inIndex - 1, posIndex);

    return root;
}

// Función para recorrer el árbol en inorden
void inOrderTraversal(TreeNode* root) {
    if (root != nullptr) {
        inOrderTraversal(root->left);
        cout << root->data << " ";
        inOrderTraversal(root->right);
    }
}

// Función para recorrer el árbol en preorden
void preOrderTraversal(TreeNode* root) {
    if (root != nullptr) {
        cout << root->data << " ";
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}

// Función para recorrer el árbol en posorden
void posOrderTraversal(TreeNode* root) {
    if (root != nullptr) {
        posOrderTraversal(root->left);
        posOrderTraversal(root->right);
        cout << root->data << " ";
    }
}

// Función para mostrar el árbol de manera horizontal
void printTree(TreeNode* root, int indent = 0) {
    if (root != nullptr) {
        printTree(root->right, indent + 4);
        cout << setw(indent) << root->data << endl;
        printTree(root->left, indent + 4);
    }
}

int main() {
    TreeNode* root = nullptr;
    vector<int> inorder, preorder, posorder;

    int choice = 0;

    do {
        cout << "\nElija una opción:\n";
        cout << "1. Ingresar/Reingresar árbol binario de búsqueda\n";
        cout << "2. Construir ABB desde Inorden-Preorden\n";
        cout << "3. Construir ABB desde Inorden-Posorden\n";
        cout << "4. Aplicar recorrido Inorden\n";
        cout << "5. Aplicar recorrido Preorden\n";
        cout << "6. Aplicar recorrido Posorden\n";
        cout << "7. Mostrar árbol\n";
        cout << "8. Salir\n";
        cout << "> ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int n;
                cout << "Ingrese el número de nodos en el árbol binario de búsqueda: ";
                cin >> n;

                cout << "Ingrese los valores del árbol binario de búsqueda:\n";
                for (int i = 0; i < n; ++i) {
                    int val;
                    cout << i + 1 << ": ";
                    cin >> val;
                    root = insertNode(root, val);
                }

                cout << "Árbol ingresado exitosamente.\n";
                break;
            }
            case 2: {
                int preIndex = 0;
                root = buildTreeFromInPre(inorder, preorder, 0, inorder.size() - 1, preIndex);
                cout << "Árbol construido exitosamente.\n";
                break;
            }
            case 3: {
                int posIndex = posorder.size() - 1;
                root = buildTreeFromInPos(inorder, posorder, 0, inorder.size() - 1, posIndex);
                cout << "Árbol construido exitosamente.\n";
                break;
            }
            case 4:
                cout << "Recorrido Inorden:\n";
                inOrderTraversal(root);
                cout << endl;
                break;
            case 5:
                cout << "Recorrido Preorden:\n";
                preOrderTraversal(root);
                cout << endl;
                break;
            case 6:
                cout << "Recorrido Posorden:\n";
                posOrderTraversal(root);
                cout << endl;
                break;
            case 7:
                cout << "Mostrando árbol:\n";
                if (root == nullptr) {
                    cout << "Árbol vacío. Ingrese el árbol primero.\n";
                } else {
                    printTree(root);
                }
                break;
            case 8:
                cout << "Saliendo del programa.\n";
                break;
            default:
                cout << "Opción no válida. Inténtelo de nuevo.\n";
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Presione ENTER para continuar...\n";
        cin.get();

    } while (choice != 8);

    return 0;
}
